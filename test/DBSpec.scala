package test

import org.specs2.mutable._
import play.api.db.slick.DB
import play.api.db.slick.Config.driver.simple._
import play.api.test._
import play.api.test.Helpers._
import models._
import org.joda.time.DateTime
import org.specs2.matcher.ThrownMessages
import scala.collection.mutable.ArrayBuffer



class DBSpec extends Specification with ThrownMessages {
  

  
  
  "DB" should {
    "be able to play a little game" in new WithApplication(FakeApplication(additionalConfiguration = inMemoryDatabase(
      options=Map("DATABASE_TO_UPPER" -> "false", "DB_CLOSE_DELAY" -> "-1")   
      ))) {
      
       
      val firstStart = new DateTime(2014, 3, 9, 10, 0)//y m d h min

      import BetterDb._

      def insertTeams()(implicit s: Session){
          ObjectMother.dummyTeams.map{t => insertOrUpdateTeamByName(t) }.foreach{ r => r must startWith("team inserted:")}
          BetterTables.teams.list.size === 6
      }
      
      def insertLevels()(implicit s: Session){
          ObjectMother.dummyLevels.map{ l => insertOrUpdateLevelByNr(l) }
          BetterTables.levels.list.size === 3
      }
      
      def insertGames()(implicit s: Session){
          ObjectMother.dummyGames(firstStart).map{ case(g,t1,t2, l) => insertGame(g, t1, t2, l) }.foreach{ r => r.isRight === true }
          BetterTables.games.list.size === 3
          BetterTables.bets.list.size === 0
      }
      
      def insertUsers()(implicit s: Session){
          val admin = insertUser(ObjectMother.adminUser, true, true, None).toOption.get 
          BetterTables.bets.list.size === 3
          createBetsForGamesForAllUsers()
          BetterTables.bets.list.size === 3
          BetterTables.specialbets.list.size === 1
          admin.hadInstructions === false
          admin.canBet === true
          val dbusers = new ArrayBuffer[User]()
          ObjectMother.dummyUsers.map{u => insertUser(u, false, false, admin.id) }.foreach{ r =>
            r.fold(
              err => fail("inserting user"),
              us => {
                 us.registeredBy === admin.id && us.isAdmin === false && us.points === 0 && us.canBet === true
                 dbusers.append(us)
              }
            )
          }
          BetterTables.bets.list.size === (3 * 4)
          createBetsForGamesForAllUsers()
          BetterTables.bets.list.size === (3 * 4)
          BetterTables.specialbets.list.size === 4
          //gamesWithBetForUser()
      }
      
      
      DB.withSession { implicit s: Session => 
        BetterTables.createTables()
        
        
        
        
        
        
      }
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    "select the correct testing db settings by default" in new WithApplication(FakeApplication(additionalConfiguration = inMemoryDatabase())) {
      DB.withSession { implicit s: Session =>
        s.conn.getMetaData.getURL must startWith("jdbc:h2:mem:play-test")
      }
    }
    

    "use the default db settings when no other possible options are available" in new WithApplication {
      DB.withSession { implicit s: Session =>
        import BetterDb._
     //     ddl()
        //the generated ddl has to be converted to psql with
        //perl -p -i -e 's/BIGINT GENERATED BY DEFAULT AS IDENTITY\(START WITH 1\) NOT NULL/BIGSERIAL/'
        s.conn.getMetaData.getURL must equalTo("jdbc:postgresql:better")
      }
    }
  }

}
