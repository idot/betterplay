# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                 controllers.Application.index()
#GET     /                                 com.github.mmizutani.playgulp.GulpAssetes.redirectRoot("/em2016/")
GET     /em2016                           com.github.mmizutani.playgulp.GulpAssets.index

GET     /em2016/api/time                   controllers.Application.time()

# in debug mode its possible to set times
POST    /em2016/api/time					controllers.Application.setDebugTime()
POST    /em2016/api/time/reset             controllers.Application.resetTime() 
 
GET     /em2016/api/teams                  controllers.Teams.all()
#GET    /em2016/api/team/:name             controllers.Teams.get(name: String)
#POST    /em2016/api/team/:name             controllers.Teams.insert(name: String)

GET     /em2016/api/players                 controllers.Players.all()
#GET     /em2016/api/player/id              controllers.Players.get(id: Long)

GET     /em2016/api/levels                  controllers.Levels.all()
#GET     /em2016/api/level/:nr               controllers.Levels.get(nr: Long)   #gets level by nr not id!
#POST    /em2016/api/level/:nr               controllers.Levels.post(nr: Long)  #creates new level by nr not id!

GET     /em2016/api/games                  controllers.Games.all()

#Posts
POST    /em2016/api/game/results           controllers.Games.submitResult()               

# gets game with all bets nr is game nr not game id!
GET     /em2016/api/game/:nr               controllers.Games.get(nr: Int)   
#creates/updates game with all bets; creates bets if not there
POST    /em2016/api/game                   controllers.Games.createGame()  

GET     /em2016/api/users                  controllers.Users.all()           

# fetches user + all of his bets 
GET     /em2016/api/user/:name             controllers.Users.get(name: String)
GET     /em2016/api/user/:username/specialBets  controllers.SpecialBets.specialBetsForUser(username: String)  

# fetches logged in user with email
GET     /em2016/api/userWithEmail          controllers.Users.userWithEmail()

#creates/updates user creates bets on first registration; does not update bets
PUT    /em2016/api/user/create                      controllers.Users.create() 
POST   /em2016/api/user/details              controllers.Users.updateDetails() 
POST   /em2016/api/user/password             controllers.Users.updatePassword() 
POST   /em2016/api/user/filter               controllers.Users.updateFilter()    
POST   /em2016/api/user/name                 controllers.Users.updateUserName()    
POST   /em2016/api/userhadinstructions        controllers.Users.updateUserHadInstructions()
POST   /em2016/api/changePasswordRequest            controllers.Users.changePasswordRequest()

#set the password for the smtp mail user
POST   /em2016/api/mailpassword               controllers.Users.mailPassword()

POST    /em2016/api/createBetsForUsers      controllers.Users.createBetsForUsers()

GET     /em2016/api/bet/log                 controllers.Bets.log()   
POST    /em2016/api/bet/:id                 controllers.Bets.update(id: Long) 

POST    /em2016/api/specialBetResult         controllers.SpecialBets.resultSpecialBet()
POST    /em2016/api/specialBet               controllers.SpecialBets.updateSpecialBet()
GET     /em2016/api/specialBets/:id          controllers.SpecialBets.specialBetsByTemplate(id: Long)
GET     /em2016/api/specialBetTemplates      controllers.SpecialBets.all()

GET     /em2016/api/statistics/excelAnon     controllers.Statistics.excelAnon()
GET     /em2016/api/statistics/excel         controllers.Statistics.excel()
GET     /em2016/api/statistics/game/:id      controllers.Statistics.game(id: Long)
GET     /em2016/api/statistics/specialBet/:name   controllers.Statistics.specialBets(name: String)



# Send (user,password) to receive token
POST    /em2016/api/login                      controllers.Application.login()
# Login user with e-mail token and set password
PUT    /em2016/api/tokenPassword             controllers.Application.userByTokenPassword() 

# Invalidate token
POST    /em2016/api/logout                     controllers.Application.logout()

# Check if token is valid and get user id
GET    /em2016/api/ping                    controllers.Application.ping()
GET    /em2016/api/settings				controllers.Application.settings()


GET        /em2016/routes                     controllers.Application.routes
GET        /em2016/jsroutes.js                controllers.Application.jsRoutes(varName ?= "jsRoutes")

# Map static resources from the /public folder to the /assets URL path
GET       /em2016/assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
->       /em2016/        gulp.Routes